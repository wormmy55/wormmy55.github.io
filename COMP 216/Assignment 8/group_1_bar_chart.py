# -*- coding: utf-8 -*-
"""group_1_Bar_Chart.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1600k9ZW_HKT00h-IeBz86cs21t8-CfiY

#Group 1
Name: Salma Chaaban <br>
Student number: 301216551 <br>
Name: Hodan Ahmed Yusuf<br>
Student number: 301226634<br>
Name: Jonathan Au<br>
Student number: 300827701<br>
Name: Landon Essex<br>
Student number: 301349452<br>
Name: Michael Angelo Cabalinan <br>
Student number: 300924795 <br>
COMP 216 - assignment 8

##Requirements:
1.	You will use the same quantity that you selected in the previous lab (from temperature, humidity, barometric pressure, customers at a mall, or just with an alternate descriptor).
2.	Design and build a GUI application class that will model a display for your sensor reasonably well.
3.	You must provide an Entry (Textbox) and a Button to change the value.
4.	There are marks for aesthetics.
5.	You must not have magic numbers in your code
6.	Error checking of input
7.	User must be able to easily read the display

Bar Chart<br>
[class]  /1<br>
[clean design of app]  /2<br>
[label/entry/button]  /2<br>
[explanation of the gui]  /3<br>
[display value accurately]  /2<br>
[aesthetics]  /6<br>
[coding quality]  /2<br>
[Total]  /20<br>
"""

import tkinter as tk
from tkinter import ttk, messagebox
import random
import math

# contants - no magic numbers
CANVAS_WIDTH = 400
CANVAS_HEIGHT = 250
BAR_X1 = 150
BAR_X2 = 250
BAR_Y_TOP = 50
BAR_Y_BOTTOM = 250
YMIN = 0
YMAX = 60

class DataGenerator:
    def __init__(self, root, ymin=YMIN, ymax=YMAX, daily_mean=19, daily_amps=[2, 1.5, 2, 1.8, 2.2], stddev=0.5):
        self.root = root
        self.ymin = ymin
        self.ymax = ymax
        self.daily_mean = daily_mean
        self.daily_amps = daily_amps
        self.daily_freqs = [2 * math.pi / 100, 0.5 * math.pi / 100, 1.8 * math.pi / 100, 0.8 * math.pi / 100, 1.1 * math.pi / 100]
        self.stddev = stddev
        self.t = 0

        self.root.title("Temperature Gauge")

        self.canvas = tk.Canvas(self.root, width=CANVAS_WIDTH, height=CANVAS_HEIGHT)
        self.canvas.pack()

        self.draw_bar_background()

        self.label = ttk.Label(self.root, text="Temp(째C):")
        self.label.pack()

        self.temp_label = ttk.Label(self.root, text="", font=("Helvetica", 16, "bold"))
        self.temp_label.pack(pady=(0, 30))

        self.input_label = ttk.Label(self.root, text="Enter temperature:")
        self.input_label.pack()

        self.input_entry = ttk.Entry(self.root, width=10)
        self.input_entry.pack(pady=(0, 20))

        self.input_entry.insert(0, str(random.randint(self.ymin, self.ymax)))

        self.update_btn = ttk.Button(self.root, text="UPDATE", command=self.update_temp)
        self.update_btn.pack(pady=(10, 40))

        self.update_temp()

    def draw_bar_background(self):
        self.canvas.create_rectangle(BAR_X1, BAR_Y_TOP, BAR_X2, BAR_Y_BOTTOM, fill="lightgrey", outline="black", tags="bar_background")

    def draw_temperature_bar(self, temp):
        self.canvas.delete("temp_bar")
        bar_height = (temp - self.ymin) / (self.ymax - self.ymin) * (BAR_Y_BOTTOM - BAR_Y_TOP)
        self.canvas.create_rectangle(BAR_X1, BAR_Y_BOTTOM - bar_height, BAR_X2, BAR_Y_BOTTOM, fill="red", tags="temp_bar")
        self.temp_label.config(text=f"{temp}째C")

    def update_temp(self):
        try:
            temp_input = float(self.input_entry.get())
            if not (self.ymin <= temp_input <= self.ymax):
                messagebox.showerror("Error", "Temperature out of range.")
                return
            self.draw_temperature_bar(temp_input)
        except ValueError:
             messagebox.showerror("Error", "Please enter a valid number.")

if __name__ == "__main__":
    root = tk.Tk()
    app = DataGenerator(root)
    root.mainloop()

import tkinter as tk
from tkinter import ttk, messagebox
import random
import math


BAR_X1 = 150
BAR_X2 = 250
BAR_Y_TOP = 50
BAR_Y_BOTTOM = 250

class DataGenerator:
    def __init__(self, root, ymin=0, ymax=60, daily_mean=19, daily_amps=[2, 1.5, 2, 1.8, 2.2], stddev=0.5):
        self.root = root
        self.ymin = ymin
        self.ymax = ymax
        self.daily_mean = daily_mean
        self.daily_amps = daily_amps
        self.daily_freqs = [2 * math.pi / 100, 0.5 * math.pi / 100, 1.8 * math.pi / 100, 0.8 * math.pi / 100, 1.1 * math.pi / 100]
        self.stddev = stddev
        self.t = 0

        self.root.title("Temperature Check Bar Chart")

        self.canvas = tk.Canvas(self.root, width=400, height=250)
        self.canvas.pack()

        self.label_min = ttk.Label(self.root, text=str(self.ymax))
        self.label_min.place(x=BAR_X2 + 10, y=BAR_Y_TOP, anchor=tk.W)

        self.label_max = ttk.Label(self.root, text=str(self.ymin))
        self.label_max.place(x=BAR_X2 + 10, y=BAR_Y_BOTTOM, anchor=tk.W)

        self.status_label = ttk.Label(self.root, text="", font=("Helvetica", 16, "bold"))
        self.status_label.pack(pady=(10, 0))

        self.draw_bar_background()

        self.temp_label = ttk.Label(root, text="", font=("Helvetica", 16, "bold"))
        self.temp_label.pack(pady=(0, 10))

        self.label = ttk.Label(self.root, text="Temp(째C):")
        self.label.pack()

        self.temp_label = ttk.Label(self.root, text="", font=("Helvetica", 16, "bold"))
        self.temp_label.pack(pady=(0, 30))

        self.input_label = ttk.Label(self.root, text="Enter temperature:")
        self.input_label.pack()

        self.input_entry = ttk.Entry(self.root, width=10)
        self.input_entry.pack(pady=(0, 20))

        self.input_entry.insert(0, str(random.randint(self.ymin, self.ymax)))

        self.update_btn = ttk.Button(self.root, text="UPDATE", command=self.update_temp)
        self.update_btn.pack(pady=(10, 40))

        self.update_temp()

    def draw_bar_background(self):
        self.canvas.create_rectangle(BAR_X1, BAR_Y_TOP, BAR_X2, BAR_Y_BOTTOM, fill="#A0CED9", outline="black", tags="bar_background")

    def draw_temperature_bar(self, temp):
        self.canvas.delete("temp_bar")
        bar_height = (temp - self.ymin) / (self.ymax - self.ymin) * (BAR_Y_BOTTOM - BAR_Y_TOP)
        self.canvas.create_rectangle(BAR_X1, BAR_Y_BOTTOM - bar_height, BAR_X2, BAR_Y_BOTTOM, fill="red", tags="temp_bar")
        self.temp_label.config(text=f"{temp}째C")

    def update_temp(self):
        try:
            temp_input = float(self.input_entry.get())
            if not (self.ymin <= temp_input <= self.ymax):
                messagebox.showerror("Error", "Temperature out of range.")
                return
            self.draw_temperature_bar(temp_input)

            label_text = "Normal"
            if temp_input < 10:
                label_text = "Low"
            elif temp_input > 40:
                label_text = "High"

            self.status_label.config(text=label_text)

        except ValueError:
             messagebox.showerror("Error", "Please enter a valid number.")

if __name__ == "__main__":
    root = tk.Tk()
    app = DataGenerator(root)
    root.mainloop()